import { useParams } from "react-router-dom";
import { useEffect, useState } from "react";

export default function Contest() {
  const { id } = useParams(); // 'id' from the URL parameter (e.g., /contest/1)
  const [contest, setContest] = useState(null);
  const [projects, setProjects] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // API URL for fetching projects for a given competition ID
  const API_PROJECTS_URL = `http://io-aplikacja-do-glosowania-1.onrender.com/api/project/competition/${id}`;
  const API_COMPETITION_URL = `http://io-aplikacja-do-glosowania-1.onrender.com/api/competition/${id}`;


  useEffect(() => {
    const fetchContestAndProjects = async () => {
      try {
        // Fetch competition details
        const competitionResponse = await fetch(API_COMPETITION_URL);
        if (!competitionResponse.ok) {
          throw new Error(`HTTP error! Status: ${competitionResponse.status}`);
        }
        const competitionData = await competitionResponse.json();
        setContest(competitionData); // Assuming competitionData contains the name of the contest

        // Fetch projects for the competition
        const projectsResponse = await fetch(API_PROJECTS_URL);
        if (!projectsResponse.ok) {
          throw new Error(`HTTP error! Status: ${projectsResponse.status}`);
        }
        const projectsData = await projectsResponse.json();
        setProjects(projectsData);

      } catch (e) {
        console.error("Error fetching contest or projects:", e);
        setError(e);
      } finally {
        setLoading(false);
      }
    };

    fetchContestAndProjects();
  }, [id, API_PROJECTS_URL, API_COMPETITION_URL]); // Rerun effect if 'id' or API URLs change

  const handleVote = (projectId) => {
    // This will be replaced with actual API call to register a vote
    alert(`Oddano głos na projekt ID: ${projectId}`);
  };

  if (loading) {
    return <div className="min-h-screen bg-white text-black py-12 px-4 flex flex-col items-center justify-center">Loading contest details...</div>;
  }

  if (error) {
    return <div className="min-h-screen bg-white text-red-500 py-12 px-4 flex flex-col items-center justify-center">Error: {error.message}</div>;
  }

  if (!contest) {
    return <div className="min-h-screen bg-white text-black py-12 px-4 flex flex-col items-center justify-center">Contest not found.</div>;
  }

  return (
    <div className="min-h-screen bg-white text-black py-12 px-4">
      <div className="max-w-4xl mx-auto">
        <h1 className="text-4xl font-bold text-center mb-8">{contest.name}</h1> {/* Display contest name */}

        {projects.length === 0 ? (
          <p className="text-center text-lg">Brak projektów dla tego konkursu.</p>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {projects.map((project) => (
              <div key={project.id} className="bg-gray-100 p-6 rounded-lg shadow-md flex flex-col justify-between">
                <div>
                  <h2 className="text-2xl font-semibold mb-2">{project.name}</h2>
                  <p className="text-gray-700 mb-4">{project.description}</p> {/* Assuming project has a description */}
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-xl font-bold text-blue-600">{project.votes || 0} głosów</span> {/* Display votes, default to 0 if null/undefined */}
                  <button
                    onClick={() => handleVote(project.id)}
                    className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
                  >
                    Oddaj Głos
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}
